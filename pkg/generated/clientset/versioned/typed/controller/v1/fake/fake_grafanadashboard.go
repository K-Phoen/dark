// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	controllerv1 "github.com/K-Phoen/dark/pkg/apis/controller/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGrafanaDashboards implements GrafanaDashboardInterface
type FakeGrafanaDashboards struct {
	Fake *FakeControllerV1
	ns   string
}

var grafanadashboardsResource = schema.GroupVersionResource{Group: "controller.k8s.io", Version: "v1", Resource: "grafanadashboards"}

var grafanadashboardsKind = schema.GroupVersionKind{Group: "controller.k8s.io", Version: "v1", Kind: "GrafanaDashboard"}

// Get takes name of the grafanaDashboard, and returns the corresponding grafanaDashboard object, and an error if there is any.
func (c *FakeGrafanaDashboards) Get(ctx context.Context, name string, options v1.GetOptions) (result *controllerv1.GrafanaDashboard, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(grafanadashboardsResource, c.ns, name), &controllerv1.GrafanaDashboard{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.GrafanaDashboard), err
}

// List takes label and field selectors, and returns the list of GrafanaDashboards that match those selectors.
func (c *FakeGrafanaDashboards) List(ctx context.Context, opts v1.ListOptions) (result *controllerv1.GrafanaDashboardList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(grafanadashboardsResource, grafanadashboardsKind, c.ns, opts), &controllerv1.GrafanaDashboardList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &controllerv1.GrafanaDashboardList{ListMeta: obj.(*controllerv1.GrafanaDashboardList).ListMeta}
	for _, item := range obj.(*controllerv1.GrafanaDashboardList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested grafanaDashboards.
func (c *FakeGrafanaDashboards) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(grafanadashboardsResource, c.ns, opts))

}

// Create takes the representation of a grafanaDashboard and creates it.  Returns the server's representation of the grafanaDashboard, and an error, if there is any.
func (c *FakeGrafanaDashboards) Create(ctx context.Context, grafanaDashboard *controllerv1.GrafanaDashboard, opts v1.CreateOptions) (result *controllerv1.GrafanaDashboard, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(grafanadashboardsResource, c.ns, grafanaDashboard), &controllerv1.GrafanaDashboard{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.GrafanaDashboard), err
}

// Update takes the representation of a grafanaDashboard and updates it. Returns the server's representation of the grafanaDashboard, and an error, if there is any.
func (c *FakeGrafanaDashboards) Update(ctx context.Context, grafanaDashboard *controllerv1.GrafanaDashboard, opts v1.UpdateOptions) (result *controllerv1.GrafanaDashboard, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(grafanadashboardsResource, c.ns, grafanaDashboard), &controllerv1.GrafanaDashboard{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.GrafanaDashboard), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeGrafanaDashboards) UpdateStatus(ctx context.Context, grafanaDashboard *controllerv1.GrafanaDashboard, opts v1.UpdateOptions) (*controllerv1.GrafanaDashboard, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(grafanadashboardsResource, "status", c.ns, grafanaDashboard), &controllerv1.GrafanaDashboard{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.GrafanaDashboard), err
}

// Delete takes name of the grafanaDashboard and deletes it. Returns an error if one occurs.
func (c *FakeGrafanaDashboards) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(grafanadashboardsResource, c.ns, name), &controllerv1.GrafanaDashboard{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGrafanaDashboards) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(grafanadashboardsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &controllerv1.GrafanaDashboardList{})
	return err
}

// Patch applies the patch and returns the patched grafanaDashboard.
func (c *FakeGrafanaDashboards) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *controllerv1.GrafanaDashboard, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(grafanadashboardsResource, c.ns, name, pt, data, subresources...), &controllerv1.GrafanaDashboard{})

	if obj == nil {
		return nil, err
	}
	return obj.(*controllerv1.GrafanaDashboard), err
}
